name: Build and Release SDK

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'SDK Version (e.g., 1.0.0)'
        required: true
      update_specs:
        description: 'Update OpenRPC and XDR specifications'
        type: boolean
        default: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Update Specifications
        if: ${{ inputs.update_specs == 'true' }}
        run: |
          mkdir -p StellarOpenRPC
          mkdir -p StellarXDR
          curl -L https://raw.githubusercontent.com/stellar/stellar-rpc/main/docs/specs/stellar-rpc.openrpc.json -o StellarOpenRPC/stellar-rpc.openrpc.json
          git clone https://github.com/stellar/stellar-core.git temp-stellar-core
          cp temp-stellar-core/src/protocol-curr/*.x StellarXDR/
          rm -rf temp-stellar-core

      - name: Clean Generated Directories
        run: |
            rm -rf StellarRPCSDK/Stellar/Generated/*
            rm -rf StellarRPCSDK/RPC/Generated/*
            mkdir -p StellarRPCSDK/Stellar/Generated
            mkdir -p StellarRPCSDK/RPC/Generated

      - name: Generate SDK Code
        run: |
          ROOT_DIR=$(pwd)
          dotnet run --project Generator/Generator.csproj -- "$ROOT_DIR/StellarXDR" "$ROOT_DIR/StellarOpenRPC/stellar-rpc.openrpc.json" "$ROOT_DIR/StellarRPCSDK/Stellar/Generated" "$ROOT_DIR/StellarRPCSDK/RPC/Generated"

      - name: Build SDK Variants
        run: |
          dotnet build StellarRPCSDK/StellarRPCSDK.csproj -c Release -p:Version=${{ inputs.version }}
          dotnet build StellarRPCSDK/StellarRPCSDK.csproj -c Unity -p:Version=${{ inputs.version }}
          dotnet build StellarRPCSDK/StellarRPCSDK.csproj -c Tizen -p:Version=${{ inputs.version }}
          dotnet build StellarRPCSDK/StellarRPCSDK.csproj -c NativeAOT -p:Version=${{ inputs.version }}

      - name: Generate Protocol Buffer Wrappers
        run: |
          GRPC_OUTPUT_DIR="$(pwd)/StellarRPCSDK_Native/gRPC"
          mkdir -p "$GRPC_OUTPUT_DIR"
          dotnet run --project ProtoGenerator/ProtoGenerator.csproj -- --proto "$(pwd)/StellarRPCSDK_Native" --grpc-aot "$GRPC_OUTPUT_DIR"

      - name: Create NuGet Packages
        run: |
          mkdir -p Releases/NuGet
          # Create NuGet packages for Standard and Tizen (not Unity)
          dotnet pack StellarRPCSDK/StellarRPCSDK.csproj -c Release -p:PackageVersion=${{ inputs.version }} -o Releases/NuGet
          dotnet pack StellarRPCSDK/StellarRPCSDK.csproj -c Tizen -p:PackageVersion=${{ inputs.version }} -o Releases/NuGet

      - name: Prepare Unity Build Output
        run: |
          mkdir -p Releases/Unity
          cp StellarRPCSDK/bin/Unity/netstandard2.1/StellarRPCSDK.dll Releases/Unity/
          cp StellarRPCSDK/bin/Unity/netstandard2.1/StellarRPCSDK.pdb Releases/Unity/
          # Copy any additional required files for Unity
          # cp StellarRPCSDK/bin/Unity/netstandard2.1/StellarRPCSDK.xml Releases/Unity/  # If you have XML documentation

      - name: Upload NuGet Packages
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: Releases/NuGet

      - name: Upload Unity Build
        uses: actions/upload-artifact@v4
        with:
          name: unity-build
          path: Releases/Unity

      # Prepare archive with only the necessary files
      - name: Prepare Archive Files
        run: |
          mkdir -p archive_content
          cp -r StellarRPCSDK archive_content/
          cp -r StellarRPCSDK_Native archive_content/
          cp -r ProtoGenerator archive_content/
          cp -r StellarOpenRPC archive_content/
          cp -r StellarXDR archive_content/

      # Create a complete build archive with only the necessary content
      - name: Create Build Archive
        run: |
          cd archive_content
          tar -czf ../build-archive.tar.gz .
          cd ..
          ls -la

      - name: Upload Build Archive
        uses: actions/upload-artifact@v4
        with:
          name: build-archive
          path: build-archive.tar.gz

  publish_native_windows:
    needs: build
    strategy:
      matrix:
        platform: [win-x64, win-arm64]
    runs-on: windows-latest
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Create a directory to extract to
      - name: Create Extract Directory
        run: mkdir extract_dir

      # Download the build archive
      - name: Download Build Archive
        uses: actions/download-artifact@v4
        with:
          name: build-archive
          path: .

      # Extract the archive
      - name: Extract Build Archive
        shell: pwsh
        run: |
          tar -xzf build-archive.tar.gz -C extract_dir
          dir extract_dir
          dir extract_dir\StellarRPCSDK
          dir extract_dir\StellarRPCSDK_Native

      - name: Publish Native Binary
        shell: pwsh
        run: |
          mkdir -p Releases/Binaries/${{ matrix.platform }}
          dotnet publish extract_dir/StellarRPCSDK_Native/StellarRPCSDK_Native.csproj -c Release -r ${{ matrix.platform }} --self-contained -p:Version=${{ github.event.inputs.version }} -o Releases/Binaries/${{ matrix.platform }}

      - name: Upload Native Binary
        uses: actions/upload-artifact@v4
        with:
          name: native-binary-${{ matrix.platform }}
          path: Releases/Binaries/${{ matrix.platform }}

  publish_native_linux:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux-x64]
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Create a directory to extract to
      - name: Create Extract Directory
        run: mkdir extract_dir

      # Download the build archive
      - name: Download Build Archive
        uses: actions/download-artifact@v4
        with:
          name: build-archive
          path: .

      # Extract the archive
      - name: Extract Build Archive
        run: |
          tar -xzf build-archive.tar.gz -C extract_dir
          ls -la extract_dir
          ls -la extract_dir/StellarRPCSDK
          ls -la extract_dir/StellarRPCSDK_Native

      - name: Publish Native Binary
        run: |
          mkdir -p Releases/Binaries/${{ matrix.platform }}
          dotnet publish extract_dir/StellarRPCSDK_Native/StellarRPCSDK_Native.csproj \
            -c Release \
            -r ${{ matrix.platform }} \
            --self-contained \
            -p:Version=${{ github.event.inputs.version }} \
            -o Releases/Binaries/${{ matrix.platform }}

      - name: Upload Native Binary
        uses: actions/upload-artifact@v4
        with:
          name: native-binary-${{ matrix.platform }}
          path: Releases/Binaries/${{ matrix.platform }}

  publish_native_linux_arm64:
    needs: build
    # Use a self-hosted arm64 runner or a service that can build for ARM64
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux-arm64]
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      # Install ARM64 cross-compilation tools
      - name: Install ARM64 tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      # Create a directory to extract to
      - name: Create Extract Directory
        run: mkdir extract_dir

      # Download the build archive
      - name: Download Build Archive
        uses: actions/download-artifact@v4
        with:
          name: build-archive
          path: .

      # Extract the archive
      - name: Extract Build Archive
        run: |
          tar -xzf build-archive.tar.gz -C extract_dir
          ls -la extract_dir
          ls -la extract_dir/StellarRPCSDK
          ls -la extract_dir/StellarRPCSDK_Native

      - name: Publish Native Binary
        # For now, skip publishing for linux-arm64 as it requires additional setup
        # Later, we can implement a proper cross-compilation setup or use a dedicated ARM64 runner
        run: |
          mkdir -p Releases/Binaries/${{ matrix.platform }}
          echo "Skipping ARM64 build due to cross-compilation constraints. This would require a proper ARM64 environment." > Releases/Binaries/${{ matrix.platform }}/README.txt
          # The following command would work with proper cross-compilation setup:
          # DOTNET_CrossGen=0 CppCompilerAndLinker=clang-9 dotnet publish extract_dir/StellarRPCSDK_Native/StellarRPCSDK_Native.csproj -c Release -r ${{ matrix.platform }} --self-contained -p:Version=${{ github.event.inputs.version }} -o Releases/Binaries/${{ matrix.platform }}

      - name: Upload Native Binary
        uses: actions/upload-artifact@v4
        with:
          name: native-binary-${{ matrix.platform }}
          path: Releases/Binaries/${{ matrix.platform }}

  publish_native_macos:
    needs: build
    runs-on: macos-latest
    strategy:
      matrix:
        platform: [osx-x64, osx-arm64]
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Create a directory to extract to
      - name: Create Extract Directory
        run: mkdir extract_dir

      # Download the build archive
      - name: Download Build Archive
        uses: actions/download-artifact@v4
        with:
          name: build-archive
          path: .

      # Extract the archive
      - name: Extract Build Archive
        run: |
          tar -xzf build-archive.tar.gz -C extract_dir
          ls -la extract_dir
          ls -la extract_dir/StellarRPCSDK
          ls -la extract_dir/StellarRPCSDK_Native

      # MacOS can cross-compile between x64 and arm64 more easily
      - name: Publish Native Binary
        run: |
          mkdir -p Releases/Binaries/${{ matrix.platform }}
          dotnet publish extract_dir/StellarRPCSDK_Native/StellarRPCSDK_Native.csproj \
            -c Release \
            -r ${{ matrix.platform }} \
            --self-contained \
            -p:Version=${{ github.event.inputs.version }} \
            -o Releases/Binaries/${{ matrix.platform }}

      - name: Upload Native Binary
        uses: actions/upload-artifact@v4
        with:
          name: native-binary-${{ matrix.platform }}
          path: Releases/Binaries/${{ matrix.platform }}

  release:
    needs: [build, publish_native_windows, publish_native_linux, publish_native_linux_arm64, publish_native_macos]
    runs-on: ubuntu-latest
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          files: |
            artifacts/nuget-packages/*
            artifacts/unity-build/*
            artifacts/native-binary-*/**/*
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish NuGet Packages
        run: |
          for package in artifacts/nuget-packages/*.nupkg; do
            dotnet nuget push $package --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
          done